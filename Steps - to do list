1. DONE
Get current league table 
  - get matchday (= number of last match played)
  - display results of last match played by calling getParticularMatch(matchday)

2. DONE but needs to be tested and number of API calls maxed out.
Calculate and add results of all matches <= matchday 


  //Continue with worker to do the calculations for the league table
//https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers

Web Workers is a simple means for web content to run scripts in background threads. The worker thread can perform tasks without interfering with the user interface. Once created, a worker can send messages to the JavaScript code that created it by posting messages to an event handler specified by that code.

You don’t (synchronously) wait for the results of a long-running computation (your own algorithm in a Worker process, a network request, etc.), you carry on with the event loop and let the computation notify you when it is finished.

3. DONE
Display league table of modified results

4. DONE
Update to current season 

5. DONE
Order the teams in adjusted League table by decreasing pts 

6. DONE
Display “Loading adjusted league table” with spinner icon until ready to display.

7.
Add a class if the results are different from the non-adjusted league table's results

8.
Write a unit test to check if it’s actually doing the calculations properly

9.
Create a server (node) and save to cache in order to deal with the issue of maxing out number of API calls (50/minute)! See the hand-written note from Andre, as well as 
https://www.npmjs.com/package/memory-cache,
https://github.com/maison-notman-house/notman-api-server/blob/master/lib/services/events/index.js :  an example of how they use server caching at Notman House, and 
https://www.heroku.com/pricing potentially, for hosting a node server. I could maybe make it open source for the time being, to qualify for free hosting, and then reassess later

10.
Make work on mobile